package ${basePackageName}#if(${moduleName}).${moduleName}#end#if(${entityConfig.packageSimpleName}).${entityConfig.packageSimpleName}#end;

import java.io.Serializable;
#foreach($packageName in ${tableInfo.getColumnTypePackageNames()})
import ${packageName};
#end
#if(${swagger})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${lombok})
import lombok.Getter;
import lombok.Setter;
#end

/**
 * $!{tableInfo.comment}Entity实体类
 *
 * @author ${author}
 * @since ${generateTime}
 */
#if(${lombok})
@Getter
@Setter
#end
@TableName("${tableInfo.name}" )
#if(${swagger})
@ApiModel(value = "${tableInfo.capitalizeTableName}实体", description = "$!{tableInfo.comment}" )
#end
public class ${tableInfo.capitalizeTableName}${entityConfig.filePost} implements Serializable {
## ----------  BEGIN 字段循环遍历  ----------
#foreach($column in ${tableInfo.columnInfos})

#if("$!column.comment" != "")
  #if(${swagger})
    @ApiModelProperty("${column.comment}" )
  #else
    /**
     * ${column.comment}
     */
  #end
#end
#if(${field.keyFlag})
## 主键
  #if(${field.keyIdentityFlag})
    @TableId(value = "${field.annotationColumnName}", type = IdType.AUTO)
  #elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.annotationColumnName}", type = IdType.${idType})
  #elseif(${field.convert})
    @TableId("${field.annotationColumnName}")
  #end
## 普通字段
#elseif(${column.fill})
## -----   存在字段填充设置   -----
  #if(${column.convert})
    @TableField(value = "${column.annotationColumnName}", fill = FieldFill.${column.fill})
  #else
    @TableField(fill = FieldFill.${column.fill})
  #end
#elseif(${column.convert})
    @TableField("${column.annotationColumnName}")
#end
## 乐观锁注解
#if(${column.versionField})
    @Version
#end
## 逻辑删除注解
#if(${column.logicDeleteField})
    @TableLogic
#end
    private ${column.javaType.getSimpleName()} ${column.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${lombok})
#foreach($column in ${tableInfo.columnInfos})
  #if(${column.javaType.getName().equals("boolean")})
    #set($getprefix="is")
  #else
    #set($getprefix="get")
  #end
    public ${column.javaType.getSimpleName()} ${getprefix}${column.capitalizePropertyName}() {
        return ${column.propertyName};
    }

    public void set${column.capitalizePropertyName}(${column.javaType.getSimpleName()} ${column.propertyName}) {
        this.${column.propertyName} = ${column.propertyName};
    }
#end
## --foreach end---
#end
    @Override
    public String toString() {
        return "${tableInfo.capitalizeTableName}{" +
          #foreach($columnn in ${tableInfo.columnInfos})
            #if($!{foreach.index}==0)
                "${columnn.propertyName}=" + ${columnn.propertyName} +
            #else
                ", ${columnn.propertyName}=" + ${columnn.propertyName} +
            #end
          #end
                "}";
    }
}
